// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-lbrlabs-eks/sdk/go/eks/internal"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/eks"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Cluster struct {
	pulumi.ResourceState

	// The Cluster control plane
	ControlPlane pulumix.GPtrOutput[eks.Cluster, eks.ClusterOutput] `pulumi:"controlPlane"`
	// The kubeconfig for this cluster.
	Kubeconfig pulumix.Output[string] `pulumi:"kubeconfig"`
	// The OIDC provider for this cluster.
	OidcProvider pulumix.GPtrOutput[iam.OpenIdConnectProvider, iam.OpenIdConnectProviderOutput] `pulumi:"oidcProvider"`
	// The system node group.
	SystemNodes pulumix.GPtrOutput[eks.NodeGroup, eks.NodeGroupOutput] `pulumi:"systemNodes"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterSubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'ClusterSubnetIds'")
	}
	if args.LetsEncryptEmail == nil {
		return nil, errors.New("invalid value for required argument 'LetsEncryptEmail'")
	}
	if args.SystemNodeSubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SystemNodeSubnetIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterRemoteComponentResource("lbrlabs-eks:index:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type clusterArgs struct {
	ClusterSubnetIds []string `pulumi:"clusterSubnetIds"`
	// The email address to use to issue certificates from Lets Encrypt.
	LetsEncryptEmail string `pulumi:"letsEncryptEmail"`
	// The initial number of nodes in the system autoscaling group.
	SystemNodeDesiredCount  *float64 `pulumi:"systemNodeDesiredCount"`
	SystemNodeInstanceTypes []string `pulumi:"systemNodeInstanceTypes"`
	// The maximum number of nodes in the system autoscaling group.
	SystemNodeMaxCount *float64 `pulumi:"systemNodeMaxCount"`
	// The minimum number of nodes in the system autoscaling group.
	SystemNodeMinCount  *float64 `pulumi:"systemNodeMinCount"`
	SystemNodeSubnetIds []string `pulumi:"systemNodeSubnetIds"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	ClusterSubnetIds pulumix.Input[[]string]
	// The email address to use to issue certificates from Lets Encrypt.
	LetsEncryptEmail pulumix.Input[string]
	// The initial number of nodes in the system autoscaling group.
	SystemNodeDesiredCount  pulumix.Input[*float64]
	SystemNodeInstanceTypes pulumix.Input[[]string]
	// The maximum number of nodes in the system autoscaling group.
	SystemNodeMaxCount pulumix.Input[*float64]
	// The minimum number of nodes in the system autoscaling group.
	SystemNodeMinCount  pulumix.Input[*float64]
	SystemNodeSubnetIds pulumix.Input[[]string]
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) ToOutput(ctx context.Context) pulumix.Output[Cluster] {
	return pulumix.Output[Cluster]{
		OutputState: o.OutputState,
	}
}

// The Cluster control plane
func (o ClusterOutput) ControlPlane() pulumix.GPtrOutput[eks.Cluster, eks.ClusterOutput] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.GPtrOutput[eks.Cluster, eks.ClusterOutput] { return v.ControlPlane })
	unwrapped := pulumix.Flatten[*eks.Cluster, pulumix.GPtrOutput[eks.Cluster, eks.ClusterOutput]](value)
	return pulumix.GPtrOutput[eks.Cluster, eks.ClusterOutput]{OutputState: unwrapped.OutputState}
}

// The kubeconfig for this cluster.
func (o ClusterOutput) Kubeconfig() pulumix.Output[string] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.Output[string] { return v.Kubeconfig })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The OIDC provider for this cluster.
func (o ClusterOutput) OidcProvider() pulumix.GPtrOutput[iam.OpenIdConnectProvider, iam.OpenIdConnectProviderOutput] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.GPtrOutput[iam.OpenIdConnectProvider, iam.OpenIdConnectProviderOutput] {
		return v.OidcProvider
	})
	unwrapped := pulumix.Flatten[*iam.OpenIdConnectProvider, pulumix.GPtrOutput[iam.OpenIdConnectProvider, iam.OpenIdConnectProviderOutput]](value)
	return pulumix.GPtrOutput[iam.OpenIdConnectProvider, iam.OpenIdConnectProviderOutput]{OutputState: unwrapped.OutputState}
}

// The system node group.
func (o ClusterOutput) SystemNodes() pulumix.GPtrOutput[eks.NodeGroup, eks.NodeGroupOutput] {
	value := pulumix.Apply[Cluster](o, func(v Cluster) pulumix.GPtrOutput[eks.NodeGroup, eks.NodeGroupOutput] { return v.SystemNodes })
	unwrapped := pulumix.Flatten[*eks.NodeGroup, pulumix.GPtrOutput[eks.NodeGroup, eks.NodeGroupOutput]](value)
	return pulumix.GPtrOutput[eks.NodeGroup, eks.NodeGroupOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ClusterOutput{})
}
