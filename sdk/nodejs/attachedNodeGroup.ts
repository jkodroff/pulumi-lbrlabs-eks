// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

import * as pulumiAws from "@pulumi/aws";

export class AttachedNodeGroup extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'lbrlabs-eks:index:AttachedNodeGroup';

    /**
     * Returns true if the given object is an instance of AttachedNodeGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AttachedNodeGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AttachedNodeGroup.__pulumiType;
    }

    public /*out*/ readonly nodeGroup!: pulumi.Output<pulumiAws.eks.NodeGroup>;

    /**
     * Create a AttachedNodeGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AttachedNodeGroupArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.subnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["nodeDesiredCount"] = args ? args.nodeDesiredCount : undefined;
            resourceInputs["nodeInstanceTypes"] = args ? args.nodeInstanceTypes : undefined;
            resourceInputs["nodeMaxCount"] = args ? args.nodeMaxCount : undefined;
            resourceInputs["nodeMinCount"] = args ? args.nodeMinCount : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["nodeGroup"] = undefined /*out*/;
        } else {
            resourceInputs["nodeGroup"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AttachedNodeGroup.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a AttachedNodeGroup resource.
 */
export interface AttachedNodeGroupArgs {
    /**
     * The cluster name to attach the nodegroup tp.
     */
    clusterName: pulumi.Input<string>;
    /**
     * The initial number of nodes in the node autoscaling group.
     */
    nodeDesiredCount?: pulumi.Input<number>;
    nodeInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum number of nodes in the node autoscaling group.
     */
    nodeMaxCount?: pulumi.Input<number>;
    /**
     * The minimum number of nodes in the node autoscaling group.
     */
    nodeMinCount?: pulumi.Input<number>;
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
}
