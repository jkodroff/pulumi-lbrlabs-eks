# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
import pulumi_aws

__all__ = ['AttachedNodeGroupArgs', 'AttachedNodeGroup']

@pulumi.input_type
class AttachedNodeGroupArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[str],
                 subnet_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 node_desired_count: Optional[pulumi.Input[float]] = None,
                 node_instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 node_max_count: Optional[pulumi.Input[float]] = None,
                 node_min_count: Optional[pulumi.Input[float]] = None):
        """
        The set of arguments for constructing a AttachedNodeGroup resource.
        :param pulumi.Input[str] cluster_name: The cluster name to attach the nodegroup tp.
        :param pulumi.Input[float] node_desired_count: The initial number of nodes in the node autoscaling group.
        :param pulumi.Input[float] node_max_count: The maximum number of nodes in the node autoscaling group.
        :param pulumi.Input[float] node_min_count: The minimum number of nodes in the node autoscaling group.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        if node_desired_count is not None:
            pulumi.set(__self__, "node_desired_count", node_desired_count)
        if node_instance_types is not None:
            pulumi.set(__self__, "node_instance_types", node_instance_types)
        if node_max_count is not None:
            pulumi.set(__self__, "node_max_count", node_max_count)
        if node_min_count is not None:
            pulumi.set(__self__, "node_min_count", node_min_count)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        The cluster name to attach the nodegroup tp.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="nodeDesiredCount")
    def node_desired_count(self) -> Optional[pulumi.Input[float]]:
        """
        The initial number of nodes in the node autoscaling group.
        """
        return pulumi.get(self, "node_desired_count")

    @node_desired_count.setter
    def node_desired_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "node_desired_count", value)

    @property
    @pulumi.getter(name="nodeInstanceTypes")
    def node_instance_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "node_instance_types")

    @node_instance_types.setter
    def node_instance_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "node_instance_types", value)

    @property
    @pulumi.getter(name="nodeMaxCount")
    def node_max_count(self) -> Optional[pulumi.Input[float]]:
        """
        The maximum number of nodes in the node autoscaling group.
        """
        return pulumi.get(self, "node_max_count")

    @node_max_count.setter
    def node_max_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "node_max_count", value)

    @property
    @pulumi.getter(name="nodeMinCount")
    def node_min_count(self) -> Optional[pulumi.Input[float]]:
        """
        The minimum number of nodes in the node autoscaling group.
        """
        return pulumi.get(self, "node_min_count")

    @node_min_count.setter
    def node_min_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "node_min_count", value)


class AttachedNodeGroup(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 node_desired_count: Optional[pulumi.Input[float]] = None,
                 node_instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 node_max_count: Optional[pulumi.Input[float]] = None,
                 node_min_count: Optional[pulumi.Input[float]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a AttachedNodeGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_name: The cluster name to attach the nodegroup tp.
        :param pulumi.Input[float] node_desired_count: The initial number of nodes in the node autoscaling group.
        :param pulumi.Input[float] node_max_count: The maximum number of nodes in the node autoscaling group.
        :param pulumi.Input[float] node_min_count: The minimum number of nodes in the node autoscaling group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AttachedNodeGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AttachedNodeGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AttachedNodeGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AttachedNodeGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 node_desired_count: Optional[pulumi.Input[float]] = None,
                 node_instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 node_max_count: Optional[pulumi.Input[float]] = None,
                 node_min_count: Optional[pulumi.Input[float]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AttachedNodeGroupArgs.__new__(AttachedNodeGroupArgs)

            if cluster_name is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_name'")
            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["node_desired_count"] = node_desired_count
            __props__.__dict__["node_instance_types"] = node_instance_types
            __props__.__dict__["node_max_count"] = node_max_count
            __props__.__dict__["node_min_count"] = node_min_count
            if subnet_ids is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_ids'")
            __props__.__dict__["subnet_ids"] = subnet_ids
            __props__.__dict__["node_group"] = None
        super(AttachedNodeGroup, __self__).__init__(
            'lbrlabs-eks:index:AttachedNodeGroup',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="nodeGroup")
    def node_group(self) -> pulumi.Output['pulumi_aws.eks.NodeGroup']:
        return pulumi.get(self, "node_group")

